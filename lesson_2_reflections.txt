When you initialize a repository a hidden file is created called .git that is
needed to keep track of your commits and other meta-data that is required to
maintain version control.

The Staging Area is different from the Working Directory and the Repository
because it does just what its name suggests; it stages files that are to be
committed from the WorkDir into the Repo. This has great value in that you can
make changes to multiple files but then ultimately add them to the same commit
when they are logically connected to each other.

You can use the staging area to make sure you have one commit per logical
change with the git diff and git --staged commands. If you've modified
multiple files that are different logical changes, you can stage the first one
and move onto the next file. When you're finished with the second file you can
run git diff --staged to see which files are already staged and git diff to
see which are not. This allows you to quickly see and organize your logical
separation of commits.

Some situations when branches would be helpful in keeping my history organized
are when you might want to try an experiment without changing your working
master or when, in the case of the asteroids game, you might want to create an
easy mode version of the game. Branches help by allowing you to create these
different versions without having to start over or worry about breaking your
master version.

The diagrams help you visualize the branch structure by allowing you to see
where each branch diverges from the master branch and therefore, also where the
master may have gone ahead of your other branches.

The result of merging two branches together is that they become one branch and
placed in order of each commit's time-stamp. It is represented as the meeting
of the two branches on the diagram because even though they are now one branch
after merging, they still have separate histories and commit parents.

The pros and cons of Git's automatic merging vs. always doing merges manually
are that when there no conflicts you can quickly commit your merge and move on
which is definitely a pro. A con, however, is that when a conflict does occur
there is no automatic way to decide which change to keep from which version and
could take some time to figure out.
